
uart-werner.elf: formato do arquivo elf32-avr

Seções:
Idx Tamanho do Nome do Arquivo VMA LMA sem Algn
  0 .data         0000000e  00800100  000007b4  00000848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080010e  0080010e  00000856  2**0
                  ALLOC
  3 .stab         00001f5c  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020a8  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000485c  2**0
                  CONTENTS, READONLY

Desmontagem da seção .text:

00000000 <__vectors>:
   0:	35 c0       	rjmp	.+106    	; 0x6c <__dtors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	d6 c0       	rjmp	.+428    	; 0x1f6 <__vector_18>
  4a:	00 00       	nop
  4c:	ff c0       	rjmp	.+510    	; 0x24c <__vector_19>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
	...

00000068 <__ctors_start>:
  68:	5f 02       	muls	r21, r31

0000006a <__ctors_end>:
  6a:	6b 02       	muls	r22, r27

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e4 eb       	ldi	r30, 0xB4	; 180
  80:	f7 e0       	ldi	r31, 0x07	; 7
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ae 30       	cpi	r26, 0x0E	; 14
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	11 e0       	ldi	r17, 0x01	; 1
  90:	ae e0       	ldi	r26, 0x0E	; 14
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a2 33       	cpi	r26, 0x32	; 50
  9a:	b1 07       	cpc	r27, r17
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	ca e6       	ldi	r28, 0x6A	; 106
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	03 c0       	rjmp	.+6      	; 0xac <__do_global_ctors+0xe>
  a6:	22 97       	sbiw	r28, 0x02	; 2
  a8:	fe 01       	movw	r30, r28
  aa:	4d d2       	rcall	.+1178   	; 0x546 <__tablejump__>
  ac:	c8 36       	cpi	r28, 0x68	; 104
  ae:	d1 07       	cpc	r29, r17
  b0:	d1 f7       	brne	.-12     	; 0xa6 <__do_global_ctors+0x8>
  b2:	2c d2       	rcall	.+1112   	; 0x50c <main>
  b4:	73 c3       	rjmp	.+1766   	; 0x79c <__do_global_dtors>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_ZN4UartC1Ev>:
#include "avr/interrupt.h"

Uart Uart::uart;


Uart::Uart(){
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <_ZN4UartC1Ev+0x6>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	f3 d0       	rcall	.+486    	; 0x2b2 <_ZN15Circular_BufferILi10EEC1Ev>
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	9a 81       	ldd	r25, Y+2	; 0x02
  d0:	40 96       	adiw	r24, 0x10	; 16
  d2:	ef d0       	rcall	.+478    	; 0x2b2 <_ZN15Circular_BufferILi10EEC1Ev>
  d4:	85 ec       	ldi	r24, 0xC5	; 197
  d6:	90 e0       	ldi	r25, 0x00	; 0
	//SERIAL
	UBRR0H = 0;
  d8:	fc 01       	movw	r30, r24
  da:	10 82       	st	Z, r1
  dc:	84 ec       	ldi	r24, 0xC4	; 196
  de:	90 e0       	ldi	r25, 0x00	; 0
	UBRR0L = 103;
  e0:	27 e6       	ldi	r18, 0x67	; 103
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
  e6:	82 ec       	ldi	r24, 0xC2	; 194
  e8:	90 e0       	ldi	r25, 0x00	; 0
	UCSR0C = 0x06;
  ea:	26 e0       	ldi	r18, 0x06	; 6
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
  f0:	81 ec       	ldi	r24, 0xC1	; 193
  f2:	90 e0       	ldi	r25, 0x00	; 0
	UCSR0B = 0x98;
  f4:	28 e9       	ldi	r18, 0x98	; 152
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
  fa:	83 e2       	ldi	r24, 0x23	; 35
  fc:	90 e0       	ldi	r25, 0x00	; 0
	//LED
	PINB = 0x23;
  fe:	23 e2       	ldi	r18, 0x23	; 35
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
 104:	84 e2       	ldi	r24, 0x24	; 36
 106:	90 e0       	ldi	r25, 0x00	; 0
	DDRB = 0x24;
 108:	24 e2       	ldi	r18, 0x24	; 36
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
 10e:	85 e2       	ldi	r24, 0x25	; 37
 110:	90 e0       	ldi	r25, 0x00	; 0
	PORTB = 0x80;
 112:	20 e8       	ldi	r18, 0x80	; 128
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <_ZN4Uart3putEh>:

void Uart::put(uint8_t c) {
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	00 d0       	rcall	.+0      	; 0x128 <_ZN4Uart3putEh+0x6>
 128:	1f 92       	push	r1
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	6b 83       	std	Y+3, r22	; 0x03
    uart.tx.push(c);
 134:	6b 81       	ldd	r22, Y+3	; 0x03
 136:	8e e1       	ldi	r24, 0x1E	; 30
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	04 d1       	rcall	.+520    	; 0x344 <_ZN15Circular_BufferILi10EE4pushEh>
 13c:	81 ec       	ldi	r24, 0xC1	; 193
    UCSR0B |= 0x20;
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	21 ec       	ldi	r18, 0xC1	; 193
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	20 62       	ori	r18, 0x20	; 32
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	0f 90       	pop	r0
}
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <_ZN4Uart3getEv>:

uint8_t Uart::get() {
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	00 d0       	rcall	.+0      	; 0x160 <_ZN4Uart3getEv+0x6>
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	9a 83       	std	Y+2, r25	; 0x02
 166:	89 83       	std	Y+1, r24	; 0x01
    return uart.rx.pop();
 168:	8e e0       	ldi	r24, 0x0E	; 14
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	1c d1       	rcall	.+568    	; 0x3a6 <_ZN15Circular_BufferILi10EE3popEv>
 16e:	0f 90       	pop	r0
}
 170:	0f 90       	pop	r0
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <_ZN4Uart8has_dataEv>:

bool Uart::has_data() {
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	00 d0       	rcall	.+0      	; 0x17e <_ZN4Uart8has_dataEv+0x6>
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	9a 83       	std	Y+2, r25	; 0x02
 184:	89 83       	std	Y+1, r24	; 0x01
    return uart.rx.has_data();
 186:	8e e0       	ldi	r24, 0x0E	; 14
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	3e d1       	rcall	.+636    	; 0x408 <_ZN15Circular_BufferILi10EE8has_dataEv>
 18c:	0f 90       	pop	r0
}
 18e:	0f 90       	pop	r0
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <_ZN4Uart20rx_interrupt_handlerEv>:

void Uart::rx_interrupt_handler() {
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
    uart.rx.push(UDR0);
 19e:	86 ec       	ldi	r24, 0xC6	; 198
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	68 2f       	mov	r22, r24
 1a8:	8e e0       	ldi	r24, 0x0E	; 14
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	cb d0       	rcall	.+406    	; 0x344 <_ZN15Circular_BufferILi10EE4pushEh>
 1ae:	df 91       	pop	r29

	//TEST
//	PORTB &= ~_BV(PORTB5);	//LIGA LED
//	PORTB |= _BV(PORTB5);	//DESLIGA LED
}
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <_ZN4Uart23empty_interrupt_handlerEv>:

void Uart::empty_interrupt_handler(){
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
	//TEST
//	PORTB &= ~_BV(PORTB5);	//LIGA LED
//	PORTB |= _BV(PORTB5);	//DESLIGA LED
    if(uart.tx.has_data())
 1c0:	8e e1       	ldi	r24, 0x1E	; 30
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	21 d1       	rcall	.+578    	; 0x408 <_ZN15Circular_BufferILi10EE8has_dataEv>
 1c6:	88 23       	and	r24, r24
 1c8:	41 f0       	breq	.+16     	; 0x1da <_ZN4Uart23empty_interrupt_handlerEv+0x26>
 1ca:	06 ec       	ldi	r16, 0xC6	; 198
        UDR0 = uart.tx.pop();
 1cc:	10 e0       	ldi	r17, 0x00	; 0
 1ce:	8e e1       	ldi	r24, 0x1E	; 30
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	e9 d0       	rcall	.+466    	; 0x3a6 <_ZN15Circular_BufferILi10EE3popEv>
 1d4:	f8 01       	movw	r30, r16
 1d6:	80 83       	st	Z, r24
 1d8:	09 c0       	rjmp	.+18     	; 0x1ec <_ZN4Uart23empty_interrupt_handlerEv+0x38>
 1da:	81 ec       	ldi	r24, 0xC1	; 193
 1dc:	90 e0       	ldi	r25, 0x00	; 0
    else UCSR0B &= ~0x20;
 1de:	21 ec       	ldi	r18, 0xC1	; 193
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f9 01       	movw	r30, r18
 1e4:	20 81       	ld	r18, Z
 1e6:	2f 7d       	andi	r18, 0xDF	; 223
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
}
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	08 95       	ret

000001f6 <__vector_18>:

ISR(USART_RX_vect ){
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	00 90 5f 00 	lds	r0, 0x005F
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	Uart::rx_interrupt_handler();
 222:	b9 df       	rcall	.-142    	; 0x196 <_ZN4Uart20rx_interrupt_handlerEv>
 224:	df 91       	pop	r29
}
 226:	cf 91       	pop	r28
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	00 92 5f 00 	sts	0x005F, r0
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_19>:

ISR(USART_UDRE_vect ){
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	00 90 5f 00 	lds	r0, 0x005F
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	Uart::empty_interrupt_handler();
 278:	9d df       	rcall	.-198    	; 0x1b4 <_ZN4Uart23empty_interrupt_handlerEv>
 27a:	df 91       	pop	r29
}
 27c:	cf 91       	pop	r28
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	00 92 5f 00 	sts	0x005F, r0
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <_ZN4Uart11interruptonEv>:

void Uart::interrupton(){
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
	sei();
 2aa:	78 94       	sei
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <_ZN15Circular_BufferILi10EEC1Ev>:
#include <avr/io.h>

template <int SIZE>
class Circular_Buffer {
public:
    Circular_Buffer() : head(0), tail(0) {};
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <_ZN15Circular_BufferILi10EEC1Ev+0x6>
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	9a 83       	std	Y+2, r25	; 0x02
 2be:	89 83       	std	Y+1, r24	; 0x01
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	9a 81       	ldd	r25, Y+2	; 0x02
 2c4:	2a e0       	ldi	r18, 0x0A	; 10
 2c6:	31 e0       	ldi	r19, 0x01	; 1
 2c8:	fc 01       	movw	r30, r24
 2ca:	31 83       	std	Z+1, r19	; 0x01
 2cc:	20 83       	st	Z, r18
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	9a 81       	ldd	r25, Y+2	; 0x02
 2d2:	fc 01       	movw	r30, r24
 2d4:	15 86       	std	Z+13, r1	; 0x0d
 2d6:	14 86       	std	Z+12, r1	; 0x0c
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	9a 81       	ldd	r25, Y+2	; 0x02
 2dc:	fc 01       	movw	r30, r24
 2de:	17 86       	std	Z+15, r1	; 0x0f
 2e0:	16 86       	std	Z+14, r1	; 0x0e
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <_ZN15Circular_BufferILi10EED1Ev>:
	virtual ~Circular_Buffer() {}
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <_ZN15Circular_BufferILi10EED1Ev+0x6>
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	9a 83       	std	Y+2, r25	; 0x02
 2f8:	89 83       	std	Y+1, r24	; 0x01
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	9a 81       	ldd	r25, Y+2	; 0x02
 2fe:	2a e0       	ldi	r18, 0x0A	; 10
 300:	31 e0       	ldi	r19, 0x01	; 1
 302:	fc 01       	movw	r30, r24
 304:	31 83       	std	Z+1, r19	; 0x01
 306:	20 83       	st	Z, r18
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	19 f0       	breq	.+6      	; 0x316 <_ZN15Circular_BufferILi10EED1Ev+0x2a>
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	9a 81       	ldd	r25, Y+2	; 0x02
 314:	ec d0       	rcall	.+472    	; 0x4ee <_ZdlPv>
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <_ZN15Circular_BufferILi10EED0Ev>:
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	00 d0       	rcall	.+0      	; 0x326 <_ZN15Circular_BufferILi10EED0Ev+0x6>
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	9a 83       	std	Y+2, r25	; 0x02
 32c:	89 83       	std	Y+1, r24	; 0x01
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	dc df       	rcall	.-72     	; 0x2ec <_ZN15Circular_BufferILi10EED1Ev>
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	9a 81       	ldd	r25, Y+2	; 0x02
 338:	da d0       	rcall	.+436    	; 0x4ee <_ZdlPv>
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <_ZN15Circular_BufferILi10EE4pushEh>:

	void push(uint8_t data) {
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	00 d0       	rcall	.+0      	; 0x34a <_ZN15Circular_BufferILi10EE4pushEh+0x6>
 34a:	1f 92       	push	r1
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	9a 83       	std	Y+2, r25	; 0x02
 352:	89 83       	std	Y+1, r24	; 0x01
 354:	6b 83       	std	Y+3, r22	; 0x03
	    buffer[head++] = data;
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	9a 81       	ldd	r25, Y+2	; 0x02
 35a:	fc 01       	movw	r30, r24
 35c:	84 85       	ldd	r24, Z+12	; 0x0c
 35e:	95 85       	ldd	r25, Z+13	; 0x0d
 360:	ac 01       	movw	r20, r24
 362:	4f 5f       	subi	r20, 0xFF	; 255
 364:	5f 4f       	sbci	r21, 0xFF	; 255
 366:	29 81       	ldd	r18, Y+1	; 0x01
 368:	3a 81       	ldd	r19, Y+2	; 0x02
 36a:	f9 01       	movw	r30, r18
 36c:	55 87       	std	Z+13, r21	; 0x0d
 36e:	44 87       	std	Z+12, r20	; 0x0c
 370:	29 81       	ldd	r18, Y+1	; 0x01
 372:	3a 81       	ldd	r19, Y+2	; 0x02
 374:	82 0f       	add	r24, r18
 376:	93 1f       	adc	r25, r19
 378:	02 96       	adiw	r24, 0x02	; 2
 37a:	2b 81       	ldd	r18, Y+3	; 0x03
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
	    if(head == SIZE) head = 0;
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	fc 01       	movw	r30, r24
 386:	84 85       	ldd	r24, Z+12	; 0x0c
 388:	95 85       	ldd	r25, Z+13	; 0x0d
 38a:	8a 30       	cpi	r24, 0x0A	; 10
 38c:	91 05       	cpc	r25, r1
 38e:	29 f4       	brne	.+10     	; 0x39a <_ZN15Circular_BufferILi10EE4pushEh+0x56>
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	9a 81       	ldd	r25, Y+2	; 0x02
 394:	fc 01       	movw	r30, r24
 396:	15 86       	std	Z+13, r1	; 0x0d
 398:	14 86       	std	Z+12, r1	; 0x0c
	}
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <_ZN15Circular_BufferILi10EE3popEv>:

	uint8_t pop() {
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	00 d0       	rcall	.+0      	; 0x3ac <_ZN15Circular_BufferILi10EE3popEv+0x6>
 3ac:	1f 92       	push	r1
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	9b 83       	std	Y+3, r25	; 0x03
 3b4:	8a 83       	std	Y+2, r24	; 0x02
	    uint8_t ret = buffer[tail++];
 3b6:	8a 81       	ldd	r24, Y+2	; 0x02
 3b8:	9b 81       	ldd	r25, Y+3	; 0x03
 3ba:	fc 01       	movw	r30, r24
 3bc:	86 85       	ldd	r24, Z+14	; 0x0e
 3be:	97 85       	ldd	r25, Z+15	; 0x0f
 3c0:	ac 01       	movw	r20, r24
 3c2:	4f 5f       	subi	r20, 0xFF	; 255
 3c4:	5f 4f       	sbci	r21, 0xFF	; 255
 3c6:	2a 81       	ldd	r18, Y+2	; 0x02
 3c8:	3b 81       	ldd	r19, Y+3	; 0x03
 3ca:	f9 01       	movw	r30, r18
 3cc:	57 87       	std	Z+15, r21	; 0x0f
 3ce:	46 87       	std	Z+14, r20	; 0x0e
 3d0:	2a 81       	ldd	r18, Y+2	; 0x02
 3d2:	3b 81       	ldd	r19, Y+3	; 0x03
 3d4:	82 0f       	add	r24, r18
 3d6:	93 1f       	adc	r25, r19
 3d8:	02 96       	adiw	r24, 0x02	; 2
 3da:	fc 01       	movw	r30, r24
 3dc:	80 81       	ld	r24, Z
 3de:	89 83       	std	Y+1, r24	; 0x01
	    if(tail == SIZE) tail = 0;
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	9b 81       	ldd	r25, Y+3	; 0x03
 3e4:	fc 01       	movw	r30, r24
 3e6:	86 85       	ldd	r24, Z+14	; 0x0e
 3e8:	97 85       	ldd	r25, Z+15	; 0x0f
 3ea:	8a 30       	cpi	r24, 0x0A	; 10
 3ec:	91 05       	cpc	r25, r1
 3ee:	29 f4       	brne	.+10     	; 0x3fa <_ZN15Circular_BufferILi10EE3popEv+0x54>
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	9b 81       	ldd	r25, Y+3	; 0x03
 3f4:	fc 01       	movw	r30, r24
 3f6:	17 86       	std	Z+15, r1	; 0x0f
 3f8:	16 86       	std	Z+14, r1	; 0x0e
	    return ret;
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
	}
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <_ZN15Circular_BufferILi10EE8has_dataEv>:

	bool has_data() { return head != tail; }
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	00 d0       	rcall	.+0      	; 0x40e <_ZN15Circular_BufferILi10EE8has_dataEv+0x6>
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	9a 83       	std	Y+2, r25	; 0x02
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	9a 81       	ldd	r25, Y+2	; 0x02
 41a:	fc 01       	movw	r30, r24
 41c:	24 85       	ldd	r18, Z+12	; 0x0c
 41e:	35 85       	ldd	r19, Z+13	; 0x0d
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	9a 81       	ldd	r25, Y+2	; 0x02
 424:	fc 01       	movw	r30, r24
 426:	86 85       	ldd	r24, Z+14	; 0x0e
 428:	97 85       	ldd	r25, Z+15	; 0x0f
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	28 17       	cp	r18, r24
 42e:	39 07       	cpc	r19, r25
 430:	09 f4       	brne	.+2      	; 0x434 <_ZN15Circular_BufferILi10EE8has_dataEv+0x2c>
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	84 2f       	mov	r24, r20
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <_ZN4UartD1Ev>:
#ifndef UART_H_
#define UART_H_

#include "Circular_Buffer.h"

class Uart {
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	00 d0       	rcall	.+0      	; 0x446 <_ZN4UartD1Ev+0x6>
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	9a 83       	std	Y+2, r25	; 0x02
 44c:	89 83       	std	Y+1, r24	; 0x01
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	9a 81       	ldd	r25, Y+2	; 0x02
 452:	40 96       	adiw	r24, 0x10	; 16
 454:	4b df       	rcall	.-362    	; 0x2ec <_ZN15Circular_BufferILi10EED1Ev>
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	9a 81       	ldd	r25, Y+2	; 0x02
 45a:	48 df       	rcall	.-368    	; 0x2ec <_ZN15Circular_BufferILi10EED1Ev>
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <_Z41__static_initialization_and_destruction_0ii>:

void Uart::interruptoff(){
	cli();
}
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	00 d0       	rcall	.+0      	; 0x46c <_Z41__static_initialization_and_destruction_0ii+0x6>
 46c:	00 d0       	rcall	.+0      	; 0x46e <_Z41__static_initialization_and_destruction_0ii+0x8>
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	9a 83       	std	Y+2, r25	; 0x02
 474:	89 83       	std	Y+1, r24	; 0x01
 476:	7c 83       	std	Y+4, r23	; 0x04
 478:	6b 83       	std	Y+3, r22	; 0x03
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	9a 81       	ldd	r25, Y+2	; 0x02
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	91 05       	cpc	r25, r1
 482:	49 f4       	brne	.+18     	; 0x496 <_Z41__static_initialization_and_destruction_0ii+0x30>
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	9c 81       	ldd	r25, Y+4	; 0x04
 488:	8f 3f       	cpi	r24, 0xFF	; 255
 48a:	2f ef       	ldi	r18, 0xFF	; 255
 48c:	92 07       	cpc	r25, r18
 48e:	19 f4       	brne	.+6      	; 0x496 <_Z41__static_initialization_and_destruction_0ii+0x30>

#include "Uart.h"
#include "avr/io.h"
#include "avr/interrupt.h"

Uart Uart::uart;
 490:	8e e0       	ldi	r24, 0x0E	; 14
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	11 de       	rcall	.-990    	; 0xb8 <_ZN4UartC1Ev>
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	9a 81       	ldd	r25, Y+2	; 0x02
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	49 f4       	brne	.+18     	; 0x4b0 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	9c 81       	ldd	r25, Y+4	; 0x04
 4a2:	8f 3f       	cpi	r24, 0xFF	; 255
 4a4:	2f ef       	ldi	r18, 0xFF	; 255
 4a6:	92 07       	cpc	r25, r18
 4a8:	19 f4       	brne	.+6      	; 0x4b0 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 4aa:	8e e0       	ldi	r24, 0x0E	; 14
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	c8 df       	rcall	.-112    	; 0x440 <_ZN4UartD1Ev>
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
	sei();
}

void Uart::interruptoff(){
	cli();
}
 4b4:	0f 90       	pop	r0
 4b6:	0f 90       	pop	r0
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <_GLOBAL__sub_I__ZN4Uart4uartE>:
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	6f ef       	ldi	r22, 0xFF	; 255
 4c8:	7f ef       	ldi	r23, 0xFF	; 255
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	cb df       	rcall	.-106    	; 0x466 <_Z41__static_initialization_and_destruction_0ii>
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <_GLOBAL__sub_D__ZN4Uart4uartE>:
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	6f ef       	ldi	r22, 0xFF	; 255
 4e0:	7f ef       	ldi	r23, 0xFF	; 255
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	bf df       	rcall	.-130    	; 0x466 <_Z41__static_initialization_and_destruction_0ii>
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <_ZdlPv>:
#include <stdlib.h>

#include "Circular_Buffer.h"
#include "Uart.h"

void operator delete(void * p) {
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	00 d0       	rcall	.+0      	; 0x4f4 <_ZdlPv+0x6>
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
 4f8:	9a 83       	std	Y+2, r25	; 0x02
 4fa:	89 83       	std	Y+1, r24	; 0x01
    free(p);
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	9a 81       	ldd	r25, Y+2	; 0x02
 500:	be d0       	rcall	.+380    	; 0x67e <free>
 502:	0f 90       	pop	r0
}
 504:	0f 90       	pop	r0
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <main>:

//uint8_t appReceive(Uart u){
//	uint8_t data = u.rx.circBufPop(& u.tx);
//}

int main() {
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	a0 97       	sbiw	r28, 0x20	; 32
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	f8 94       	cli
 51a:	de bf       	out	0x3e, r29	; 62
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	cd bf       	out	0x3d, r28	; 61
	Uart u;
 520:	ce 01       	movw	r24, r28
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	c9 dd       	rcall	.-1134   	; 0xb8 <_ZN4UartC1Ev>
 526:	bd de       	rcall	.-646    	; 0x2a2 <_ZN4Uart11interruptonEv>
	u.interrupton();
 528:	ce 01       	movw	r24, r28
 52a:	01 96       	adiw	r24, 0x01	; 1
//	UDR0 = appReceive(u);
//	appSend(u,'t');
//	UDR0 = appReceive(u);

	while (true) {
	    if(u.has_data())
 52c:	25 de       	rcall	.-950    	; 0x178 <_ZN4Uart8has_dataEv>
 52e:	88 23       	and	r24, r24
 530:	d9 f3       	breq	.-10     	; 0x528 <main+0x1c>
 532:	ce 01       	movw	r24, r28
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	11 de       	rcall	.-990    	; 0x15a <_ZN4Uart3getEv>
	        u.put(u.get());
 538:	68 2f       	mov	r22, r24
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	f1 dd       	rcall	.-1054   	; 0x122 <_ZN4Uart3putEh>
 540:	f3 cf       	rjmp	.-26     	; 0x528 <main+0x1c>

00000542 <__tablejump2__>:
 542:	ee 0f       	add	r30, r30
 544:	ff 1f       	adc	r31, r31

00000546 <__tablejump__>:
 546:	05 90       	lpm	r0, Z+
 548:	f4 91       	lpm	r31, Z
 54a:	e0 2d       	mov	r30, r0
 54c:	09 94       	ijmp

0000054e <malloc>:
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	82 30       	cpi	r24, 0x02	; 2
 554:	91 05       	cpc	r25, r1
 556:	10 f4       	brcc	.+4      	; 0x55c <malloc+0xe>
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	e0 91 30 01 	lds	r30, 0x0130
 560:	f0 91 31 01 	lds	r31, 0x0131
 564:	20 e0       	ldi	r18, 0x00	; 0
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	a0 e0       	ldi	r26, 0x00	; 0
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	30 97       	sbiw	r30, 0x00	; 0
 56e:	39 f1       	breq	.+78     	; 0x5be <malloc+0x70>
 570:	40 81       	ld	r20, Z
 572:	51 81       	ldd	r21, Z+1	; 0x01
 574:	48 17       	cp	r20, r24
 576:	59 07       	cpc	r21, r25
 578:	b8 f0       	brcs	.+46     	; 0x5a8 <malloc+0x5a>
 57a:	48 17       	cp	r20, r24
 57c:	59 07       	cpc	r21, r25
 57e:	71 f4       	brne	.+28     	; 0x59c <malloc+0x4e>
 580:	82 81       	ldd	r24, Z+2	; 0x02
 582:	93 81       	ldd	r25, Z+3	; 0x03
 584:	10 97       	sbiw	r26, 0x00	; 0
 586:	29 f0       	breq	.+10     	; 0x592 <malloc+0x44>
 588:	13 96       	adiw	r26, 0x03	; 3
 58a:	9c 93       	st	X, r25
 58c:	8e 93       	st	-X, r24
 58e:	12 97       	sbiw	r26, 0x02	; 2
 590:	2c c0       	rjmp	.+88     	; 0x5ea <malloc+0x9c>
 592:	90 93 31 01 	sts	0x0131, r25
 596:	80 93 30 01 	sts	0x0130, r24
 59a:	27 c0       	rjmp	.+78     	; 0x5ea <malloc+0x9c>
 59c:	21 15       	cp	r18, r1
 59e:	31 05       	cpc	r19, r1
 5a0:	31 f0       	breq	.+12     	; 0x5ae <malloc+0x60>
 5a2:	42 17       	cp	r20, r18
 5a4:	53 07       	cpc	r21, r19
 5a6:	18 f0       	brcs	.+6      	; 0x5ae <malloc+0x60>
 5a8:	a9 01       	movw	r20, r18
 5aa:	db 01       	movw	r26, r22
 5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <malloc+0x62>
 5ae:	ef 01       	movw	r28, r30
 5b0:	9a 01       	movw	r18, r20
 5b2:	bd 01       	movw	r22, r26
 5b4:	df 01       	movw	r26, r30
 5b6:	02 80       	ldd	r0, Z+2	; 0x02
 5b8:	f3 81       	ldd	r31, Z+3	; 0x03
 5ba:	e0 2d       	mov	r30, r0
 5bc:	d7 cf       	rjmp	.-82     	; 0x56c <malloc+0x1e>
 5be:	21 15       	cp	r18, r1
 5c0:	31 05       	cpc	r19, r1
 5c2:	f9 f0       	breq	.+62     	; 0x602 <malloc+0xb4>
 5c4:	28 1b       	sub	r18, r24
 5c6:	39 0b       	sbc	r19, r25
 5c8:	24 30       	cpi	r18, 0x04	; 4
 5ca:	31 05       	cpc	r19, r1
 5cc:	80 f4       	brcc	.+32     	; 0x5ee <malloc+0xa0>
 5ce:	8a 81       	ldd	r24, Y+2	; 0x02
 5d0:	9b 81       	ldd	r25, Y+3	; 0x03
 5d2:	61 15       	cp	r22, r1
 5d4:	71 05       	cpc	r23, r1
 5d6:	21 f0       	breq	.+8      	; 0x5e0 <malloc+0x92>
 5d8:	fb 01       	movw	r30, r22
 5da:	93 83       	std	Z+3, r25	; 0x03
 5dc:	82 83       	std	Z+2, r24	; 0x02
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <malloc+0x9a>
 5e0:	90 93 31 01 	sts	0x0131, r25
 5e4:	80 93 30 01 	sts	0x0130, r24
 5e8:	fe 01       	movw	r30, r28
 5ea:	32 96       	adiw	r30, 0x02	; 2
 5ec:	44 c0       	rjmp	.+136    	; 0x676 <malloc+0x128>
 5ee:	fe 01       	movw	r30, r28
 5f0:	e2 0f       	add	r30, r18
 5f2:	f3 1f       	adc	r31, r19
 5f4:	81 93       	st	Z+, r24
 5f6:	91 93       	st	Z+, r25
 5f8:	22 50       	subi	r18, 0x02	; 2
 5fa:	31 09       	sbc	r19, r1
 5fc:	39 83       	std	Y+1, r19	; 0x01
 5fe:	28 83       	st	Y, r18
 600:	3a c0       	rjmp	.+116    	; 0x676 <malloc+0x128>
 602:	20 91 2e 01 	lds	r18, 0x012E
 606:	30 91 2f 01 	lds	r19, 0x012F
 60a:	23 2b       	or	r18, r19
 60c:	41 f4       	brne	.+16     	; 0x61e <malloc+0xd0>
 60e:	20 91 02 01 	lds	r18, 0x0102
 612:	30 91 03 01 	lds	r19, 0x0103
 616:	30 93 2f 01 	sts	0x012F, r19
 61a:	20 93 2e 01 	sts	0x012E, r18
 61e:	20 91 00 01 	lds	r18, 0x0100
 622:	30 91 01 01 	lds	r19, 0x0101
 626:	21 15       	cp	r18, r1
 628:	31 05       	cpc	r19, r1
 62a:	41 f4       	brne	.+16     	; 0x63c <malloc+0xee>
 62c:	2d b7       	in	r18, 0x3d	; 61
 62e:	3e b7       	in	r19, 0x3e	; 62
 630:	40 91 04 01 	lds	r20, 0x0104
 634:	50 91 05 01 	lds	r21, 0x0105
 638:	24 1b       	sub	r18, r20
 63a:	35 0b       	sbc	r19, r21
 63c:	e0 91 2e 01 	lds	r30, 0x012E
 640:	f0 91 2f 01 	lds	r31, 0x012F
 644:	e2 17       	cp	r30, r18
 646:	f3 07       	cpc	r31, r19
 648:	a0 f4       	brcc	.+40     	; 0x672 <malloc+0x124>
 64a:	2e 1b       	sub	r18, r30
 64c:	3f 0b       	sbc	r19, r31
 64e:	28 17       	cp	r18, r24
 650:	39 07       	cpc	r19, r25
 652:	78 f0       	brcs	.+30     	; 0x672 <malloc+0x124>
 654:	ac 01       	movw	r20, r24
 656:	4e 5f       	subi	r20, 0xFE	; 254
 658:	5f 4f       	sbci	r21, 0xFF	; 255
 65a:	24 17       	cp	r18, r20
 65c:	35 07       	cpc	r19, r21
 65e:	48 f0       	brcs	.+18     	; 0x672 <malloc+0x124>
 660:	4e 0f       	add	r20, r30
 662:	5f 1f       	adc	r21, r31
 664:	50 93 2f 01 	sts	0x012F, r21
 668:	40 93 2e 01 	sts	0x012E, r20
 66c:	81 93       	st	Z+, r24
 66e:	91 93       	st	Z+, r25
 670:	02 c0       	rjmp	.+4      	; 0x676 <malloc+0x128>
 672:	e0 e0       	ldi	r30, 0x00	; 0
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	cf 01       	movw	r24, r30
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <free>:
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	00 97       	sbiw	r24, 0x00	; 0
 684:	09 f4       	brne	.+2      	; 0x688 <free+0xa>
 686:	87 c0       	rjmp	.+270    	; 0x796 <free+0x118>
 688:	fc 01       	movw	r30, r24
 68a:	32 97       	sbiw	r30, 0x02	; 2
 68c:	13 82       	std	Z+3, r1	; 0x03
 68e:	12 82       	std	Z+2, r1	; 0x02
 690:	c0 91 30 01 	lds	r28, 0x0130
 694:	d0 91 31 01 	lds	r29, 0x0131
 698:	20 97       	sbiw	r28, 0x00	; 0
 69a:	81 f4       	brne	.+32     	; 0x6bc <free+0x3e>
 69c:	20 81       	ld	r18, Z
 69e:	31 81       	ldd	r19, Z+1	; 0x01
 6a0:	28 0f       	add	r18, r24
 6a2:	39 1f       	adc	r19, r25
 6a4:	80 91 2e 01 	lds	r24, 0x012E
 6a8:	90 91 2f 01 	lds	r25, 0x012F
 6ac:	82 17       	cp	r24, r18
 6ae:	93 07       	cpc	r25, r19
 6b0:	79 f5       	brne	.+94     	; 0x710 <free+0x92>
 6b2:	f0 93 2f 01 	sts	0x012F, r31
 6b6:	e0 93 2e 01 	sts	0x012E, r30
 6ba:	6d c0       	rjmp	.+218    	; 0x796 <free+0x118>
 6bc:	de 01       	movw	r26, r28
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	ae 17       	cp	r26, r30
 6c4:	bf 07       	cpc	r27, r31
 6c6:	50 f4       	brcc	.+20     	; 0x6dc <free+0x5e>
 6c8:	12 96       	adiw	r26, 0x02	; 2
 6ca:	4d 91       	ld	r20, X+
 6cc:	5c 91       	ld	r21, X
 6ce:	13 97       	sbiw	r26, 0x03	; 3
 6d0:	9d 01       	movw	r18, r26
 6d2:	41 15       	cp	r20, r1
 6d4:	51 05       	cpc	r21, r1
 6d6:	09 f1       	breq	.+66     	; 0x71a <free+0x9c>
 6d8:	da 01       	movw	r26, r20
 6da:	f3 cf       	rjmp	.-26     	; 0x6c2 <free+0x44>
 6dc:	b3 83       	std	Z+3, r27	; 0x03
 6de:	a2 83       	std	Z+2, r26	; 0x02
 6e0:	40 81       	ld	r20, Z
 6e2:	51 81       	ldd	r21, Z+1	; 0x01
 6e4:	84 0f       	add	r24, r20
 6e6:	95 1f       	adc	r25, r21
 6e8:	8a 17       	cp	r24, r26
 6ea:	9b 07       	cpc	r25, r27
 6ec:	71 f4       	brne	.+28     	; 0x70a <free+0x8c>
 6ee:	8d 91       	ld	r24, X+
 6f0:	9c 91       	ld	r25, X
 6f2:	11 97       	sbiw	r26, 0x01	; 1
 6f4:	84 0f       	add	r24, r20
 6f6:	95 1f       	adc	r25, r21
 6f8:	02 96       	adiw	r24, 0x02	; 2
 6fa:	91 83       	std	Z+1, r25	; 0x01
 6fc:	80 83       	st	Z, r24
 6fe:	12 96       	adiw	r26, 0x02	; 2
 700:	8d 91       	ld	r24, X+
 702:	9c 91       	ld	r25, X
 704:	13 97       	sbiw	r26, 0x03	; 3
 706:	93 83       	std	Z+3, r25	; 0x03
 708:	82 83       	std	Z+2, r24	; 0x02
 70a:	21 15       	cp	r18, r1
 70c:	31 05       	cpc	r19, r1
 70e:	29 f4       	brne	.+10     	; 0x71a <free+0x9c>
 710:	f0 93 31 01 	sts	0x0131, r31
 714:	e0 93 30 01 	sts	0x0130, r30
 718:	3e c0       	rjmp	.+124    	; 0x796 <free+0x118>
 71a:	d9 01       	movw	r26, r18
 71c:	13 96       	adiw	r26, 0x03	; 3
 71e:	fc 93       	st	X, r31
 720:	ee 93       	st	-X, r30
 722:	12 97       	sbiw	r26, 0x02	; 2
 724:	4d 91       	ld	r20, X+
 726:	5d 91       	ld	r21, X+
 728:	a4 0f       	add	r26, r20
 72a:	b5 1f       	adc	r27, r21
 72c:	ea 17       	cp	r30, r26
 72e:	fb 07       	cpc	r31, r27
 730:	79 f4       	brne	.+30     	; 0x750 <free+0xd2>
 732:	80 81       	ld	r24, Z
 734:	91 81       	ldd	r25, Z+1	; 0x01
 736:	84 0f       	add	r24, r20
 738:	95 1f       	adc	r25, r21
 73a:	02 96       	adiw	r24, 0x02	; 2
 73c:	d9 01       	movw	r26, r18
 73e:	11 96       	adiw	r26, 0x01	; 1
 740:	9c 93       	st	X, r25
 742:	8e 93       	st	-X, r24
 744:	82 81       	ldd	r24, Z+2	; 0x02
 746:	93 81       	ldd	r25, Z+3	; 0x03
 748:	13 96       	adiw	r26, 0x03	; 3
 74a:	9c 93       	st	X, r25
 74c:	8e 93       	st	-X, r24
 74e:	12 97       	sbiw	r26, 0x02	; 2
 750:	e0 e0       	ldi	r30, 0x00	; 0
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	9b 81       	ldd	r25, Y+3	; 0x03
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	19 f0       	breq	.+6      	; 0x762 <free+0xe4>
 75c:	fe 01       	movw	r30, r28
 75e:	ec 01       	movw	r28, r24
 760:	f9 cf       	rjmp	.-14     	; 0x754 <free+0xd6>
 762:	ce 01       	movw	r24, r28
 764:	02 96       	adiw	r24, 0x02	; 2
 766:	28 81       	ld	r18, Y
 768:	39 81       	ldd	r19, Y+1	; 0x01
 76a:	82 0f       	add	r24, r18
 76c:	93 1f       	adc	r25, r19
 76e:	20 91 2e 01 	lds	r18, 0x012E
 772:	30 91 2f 01 	lds	r19, 0x012F
 776:	28 17       	cp	r18, r24
 778:	39 07       	cpc	r19, r25
 77a:	69 f4       	brne	.+26     	; 0x796 <free+0x118>
 77c:	30 97       	sbiw	r30, 0x00	; 0
 77e:	29 f4       	brne	.+10     	; 0x78a <free+0x10c>
 780:	10 92 31 01 	sts	0x0131, r1
 784:	10 92 30 01 	sts	0x0130, r1
 788:	02 c0       	rjmp	.+4      	; 0x78e <free+0x110>
 78a:	13 82       	std	Z+3, r1	; 0x03
 78c:	12 82       	std	Z+2, r1	; 0x02
 78e:	d0 93 2f 01 	sts	0x012F, r29
 792:	c0 93 2e 01 	sts	0x012E, r28
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	08 95       	ret

0000079c <__do_global_dtors>:
 79c:	10 e0       	ldi	r17, 0x00	; 0
 79e:	ca e6       	ldi	r28, 0x6A	; 106
 7a0:	d0 e0       	ldi	r29, 0x00	; 0
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <__do_global_dtors+0xe>
 7a4:	fe 01       	movw	r30, r28
 7a6:	cf de       	rcall	.-610    	; 0x546 <__tablejump__>
 7a8:	22 96       	adiw	r28, 0x02	; 2
 7aa:	cc 36       	cpi	r28, 0x6C	; 108
 7ac:	d1 07       	cpc	r29, r17
 7ae:	d1 f7       	brne	.-12     	; 0x7a4 <__do_global_dtors+0x8>
 7b0:	f8 94       	cli

000007b2 <__stop_program>:
 7b2:	ff cf       	rjmp	.-2      	; 0x7b2 <__stop_program>
