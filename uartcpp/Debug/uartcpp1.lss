
uartcpp1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000009c8  00000a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800124  00800124  00000a80  2**0
                  ALLOC
  3 .stab         000021e4  00000000  00000000  00000a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001691  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	37 c0       	rjmp	.+110    	; 0x70 <__dtors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
   6:	00 00       	nop
   8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
   e:	00 00       	nop
  10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
  12:	00 00       	nop
  14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
  16:	00 00       	nop
  18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
  1e:	00 00       	nop
  20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
  26:	00 00       	nop
  28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
  2a:	00 00       	nop
  2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
  3e:	00 00       	nop
  40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c2       	rjmp	.+1198   	; 0x4f8 <__vector_18>
  4a:	00 00       	nop
  4c:	7e c2       	rjmp	.+1276   	; 0x54a <__vector_19>
  4e:	00 00       	nop
  50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
  52:	00 00       	nop
  54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
  56:	00 00       	nop
  58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
  5e:	00 00       	nop
  60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
	...

00000068 <__ctors_start>:
  68:	f6 01       	movw	r30, r12
  6a:	0b 03       	fmul	r16, r19

0000006c <__ctors_end>:
  6c:	02 02       	muls	r16, r18
  6e:	17 03       	mulsu	r17, r23

00000070 <__dtors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 ec       	ldi	r30, 0xC8	; 200
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 32       	cpi	r26, 0x24	; 36
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a4 e2       	ldi	r26, 0x24	; 36
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ab 33       	cpi	r26, 0x3B	; 59
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>

000000a2 <__do_global_ctors>:
  a2:	10 e0       	ldi	r17, 0x00	; 0
  a4:	cc e6       	ldi	r28, 0x6C	; 108
  a6:	d0 e0       	ldi	r29, 0x00	; 0
  a8:	03 c0       	rjmp	.+6      	; 0xb0 <__do_global_ctors+0xe>
  aa:	22 97       	sbiw	r28, 0x02	; 2
  ac:	fe 01       	movw	r30, r28
  ae:	49 d3       	rcall	.+1682   	; 0x742 <__tablejump__>
  b0:	c8 36       	cpi	r28, 0x68	; 104
  b2:	d1 07       	cpc	r29, r17
  b4:	d1 f7       	brne	.-12     	; 0xaa <__do_global_ctors+0x8>
  b6:	f4 d2       	rcall	.+1512   	; 0x6a0 <main>
  b8:	7b c4       	rjmp	.+2294   	; 0x9b0 <__do_global_dtors>

000000ba <__bad_interrupt>:
  ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <_ZNK6Buffer9getBufferEv>:
	Buffer();
	virtual ~Buffer();
	int circBufPush(Buffer * c, uint8_t data);
	uint8_t circBufPop(Buffer * c);

	uint8_t * const getBuffer() const {
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	00 d0       	rcall	.+0      	; 0xc2 <_ZNK6Buffer9getBufferEv+0x6>
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	9a 83       	std	Y+2, r25	; 0x02
  c8:	89 83       	std	Y+1, r24	; 0x01
		return * buffer;
  ca:	80 91 06 01 	lds	r24, 0x0106
  ce:	90 91 07 01 	lds	r25, 0x0107
	}
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <_ZNK6Buffer7getHeadEv>:
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <_ZNK6Buffer7getHeadEv+0x6>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	9a 83       	std	Y+2, r25	; 0x02
  e8:	89 83       	std	Y+1, r24	; 0x01
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	fc 01       	movw	r30, r24
  f0:	82 81       	ldd	r24, Z+2	; 0x02
  f2:	93 81       	ldd	r25, Z+3	; 0x03
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	cf 91       	pop	r28
  fa:	df 91       	pop	r29
  fc:	08 95       	ret

000000fe <_ZN6Buffer7setHeadEi>:

	int getHead() const {
		return head;
	}

	void setHead(int head) {
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	00 d0       	rcall	.+0      	; 0x104 <_ZN6Buffer7setHeadEi+0x6>
 104:	00 d0       	rcall	.+0      	; 0x106 <_ZN6Buffer7setHeadEi+0x8>
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01
 10e:	7c 83       	std	Y+4, r23	; 0x04
 110:	6b 83       	std	Y+3, r22	; 0x03
		this->head = head;
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	2b 81       	ldd	r18, Y+3	; 0x03
 118:	3c 81       	ldd	r19, Y+4	; 0x04
 11a:	fc 01       	movw	r30, r24
 11c:	33 83       	std	Z+3, r19	; 0x03
 11e:	22 83       	std	Z+2, r18	; 0x02
	}
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <_ZNK6Buffer9getMaxLenEv>:

	const int getMaxLen() const {
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	00 d0       	rcall	.+0      	; 0x134 <_ZNK6Buffer9getMaxLenEv+0x6>
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
		return maxLen;
 13c:	80 91 1a 01 	lds	r24, 0x011A
 140:	90 91 1b 01 	lds	r25, 0x011B
	}
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	08 95       	ret

0000014e <_ZNK6Buffer7getTailEv>:
 14e:	df 93       	push	r29
 150:	cf 93       	push	r28
 152:	00 d0       	rcall	.+0      	; 0x154 <_ZNK6Buffer7getTailEv+0x6>
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	9a 83       	std	Y+2, r25	; 0x02
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	fc 01       	movw	r30, r24
 162:	84 81       	ldd	r24, Z+4	; 0x04
 164:	95 81       	ldd	r25, Z+5	; 0x05
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	cf 91       	pop	r28
 16c:	df 91       	pop	r29
 16e:	08 95       	ret

00000170 <_ZN6Buffer7setTailEi>:

	int getTail() const {
		return tail;
	}

	void setTail(int tail) {
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	00 d0       	rcall	.+0      	; 0x176 <_ZN6Buffer7setTailEi+0x6>
 176:	00 d0       	rcall	.+0      	; 0x178 <_ZN6Buffer7setTailEi+0x8>
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	9a 83       	std	Y+2, r25	; 0x02
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	7c 83       	std	Y+4, r23	; 0x04
 182:	6b 83       	std	Y+3, r22	; 0x03
		this->tail = tail;
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	2b 81       	ldd	r18, Y+3	; 0x03
 18a:	3c 81       	ldd	r19, Y+4	; 0x04
 18c:	fc 01       	movw	r30, r24
 18e:	35 83       	std	Z+5, r19	; 0x05
 190:	24 83       	std	Z+4, r18	; 0x04
	}
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	cf 91       	pop	r28
 19c:	df 91       	pop	r29
 19e:	08 95       	ret

000001a0 <_ZdlPv>:

Buffer Buffer::b;
uint8_t * const Buffer::buffer[MAX_SIZE] = {0};
const int Buffer::maxLen = MAX_SIZE;

void operator delete(void* p) {
 1a0:	df 93       	push	r29
 1a2:	cf 93       	push	r28
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <_ZdlPv+0x6>
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	9a 83       	std	Y+2, r25	; 0x02
 1ac:	89 83       	std	Y+1, r24	; 0x01
	free(p);
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	9a 81       	ldd	r25, Y+2	; 0x02
 1b2:	65 d3       	rcall	.+1738   	; 0x87e <free>
 1b4:	0f 90       	pop	r0
}
 1b6:	0f 90       	pop	r0
 1b8:	cf 91       	pop	r28
 1ba:	df 91       	pop	r29
 1bc:	08 95       	ret

000001be <_ZN6BufferC1Ev>:

Buffer::Buffer() {
 1be:	df 93       	push	r29
 1c0:	cf 93       	push	r28
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <_ZN6BufferC1Ev+0x6>
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	9a 81       	ldd	r25, Y+2	; 0x02
 1d0:	20 e2       	ldi	r18, 0x20	; 32
 1d2:	31 e0       	ldi	r19, 0x01	; 1
 1d4:	fc 01       	movw	r30, r24
 1d6:	31 83       	std	Z+1, r19	; 0x01
 1d8:	20 83       	st	Z, r18
	// TODO Auto-generated constructor stub
}
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	cf 91       	pop	r28
 1e0:	df 91       	pop	r29
 1e2:	08 95       	ret

000001e4 <_ZN6BufferD1Ev>:

Buffer::~Buffer() {
 1e4:	df 93       	push	r29
 1e6:	cf 93       	push	r28
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <_ZN6BufferD1Ev+0x6>
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	20 e2       	ldi	r18, 0x20	; 32
 1f8:	31 e0       	ldi	r19, 0x01	; 1
 1fa:	fc 01       	movw	r30, r24
 1fc:	31 83       	std	Z+1, r19	; 0x01
 1fe:	20 83       	st	Z, r18
	// TODO Auto-generated destructor stub
}
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	81 70       	andi	r24, 0x01	; 1
 206:	90 70       	andi	r25, 0x00	; 0
 208:	88 23       	and	r24, r24
 20a:	19 f0       	breq	.+6      	; 0x212 <_ZN6BufferD1Ev+0x2e>
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	9a 81       	ldd	r25, Y+2	; 0x02
 210:	c7 df       	rcall	.-114    	; 0x1a0 <_ZdlPv>
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	08 95       	ret

0000021c <_ZN6BufferD0Ev>:

Buffer::Buffer() {
	// TODO Auto-generated constructor stub
}

Buffer::~Buffer() {
 21c:	df 93       	push	r29
 21e:	cf 93       	push	r28
 220:	00 d0       	rcall	.+0      	; 0x222 <_ZN6BufferD0Ev+0x6>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	9a 83       	std	Y+2, r25	; 0x02
 228:	89 83       	std	Y+1, r24	; 0x01
	// TODO Auto-generated destructor stub
}
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	9a 81       	ldd	r25, Y+2	; 0x02
 22e:	da df       	rcall	.-76     	; 0x1e4 <_ZN6BufferD1Ev>
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	9a 81       	ldd	r25, Y+2	; 0x02
 234:	b5 df       	rcall	.-150    	; 0x1a0 <_ZdlPv>
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	cf 91       	pop	r28
 23c:	df 91       	pop	r29
 23e:	08 95       	ret

00000240 <_ZN6Buffer10circBufPopEPS_>:

uint8_t Buffer::circBufPop(Buffer * c){
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	29 97       	sbiw	r28, 0x09	; 9
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	9f 83       	std	Y+7, r25	; 0x07
 25a:	8e 83       	std	Y+6, r24	; 0x06
 25c:	79 87       	std	Y+9, r23	; 0x09
 25e:	68 87       	std	Y+8, r22	; 0x08
	if (c->getHead() == c->getTail())
 260:	88 85       	ldd	r24, Y+8	; 0x08
 262:	99 85       	ldd	r25, Y+9	; 0x09
 264:	3b df       	rcall	.-394    	; 0xdc <_ZNK6Buffer7getHeadEv>
 266:	8c 01       	movw	r16, r24
 268:	88 85       	ldd	r24, Y+8	; 0x08
 26a:	99 85       	ldd	r25, Y+9	; 0x09
 26c:	70 df       	rcall	.-288    	; 0x14e <_ZNK6Buffer7getTailEv>
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	08 17       	cp	r16, r24
 272:	19 07       	cpc	r17, r25
 274:	09 f0       	breq	.+2      	; 0x278 <_ZN6Buffer10circBufPopEPS_+0x38>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	22 23       	and	r18, r18
 27a:	11 f0       	breq	.+4      	; 0x280 <_ZN6Buffer10circBufPopEPS_+0x40>
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	2b c0       	rjmp	.+86     	; 0x2d6 <_ZN6Buffer10circBufPopEPS_+0x96>
		return -1;
 280:	88 85       	ldd	r24, Y+8	; 0x08
 282:	99 85       	ldd	r25, Y+9	; 0x09
	uint8_t * aux = c->getBuffer();
 284:	1b df       	rcall	.-458    	; 0xbc <_ZNK6Buffer9getBufferEv>
 286:	9c 83       	std	Y+4, r25	; 0x04
 288:	8b 83       	std	Y+3, r24	; 0x03
 28a:	88 85       	ldd	r24, Y+8	; 0x08
 28c:	99 85       	ldd	r25, Y+9	; 0x09
 28e:	5f df       	rcall	.-322    	; 0x14e <_ZNK6Buffer7getTailEv>
	uint8_t data = aux[c->getTail()];
 290:	2b 81       	ldd	r18, Y+3	; 0x03
 292:	3c 81       	ldd	r19, Y+4	; 0x04
 294:	82 0f       	add	r24, r18
 296:	93 1f       	adc	r25, r19
 298:	fc 01       	movw	r30, r24
 29a:	80 81       	ld	r24, Z
 29c:	8d 83       	std	Y+5, r24	; 0x05
 29e:	88 85       	ldd	r24, Y+8	; 0x08
 2a0:	99 85       	ldd	r25, Y+9	; 0x09
 2a2:	55 df       	rcall	.-342    	; 0x14e <_ZNK6Buffer7getTailEv>
 2a4:	01 96       	adiw	r24, 0x01	; 1

	int next = c->getTail() + 1;
 2a6:	9a 83       	std	Y+2, r25	; 0x02
 2a8:	89 83       	std	Y+1, r24	; 0x01
 2aa:	88 85       	ldd	r24, Y+8	; 0x08
 2ac:	99 85       	ldd	r25, Y+9	; 0x09
 2ae:	3f df       	rcall	.-386    	; 0x12e <_ZNK6Buffer9getMaxLenEv>
 2b0:	9c 01       	movw	r18, r24
 2b2:	41 e0       	ldi	r20, 0x01	; 1
	if(next >= c->getMaxLen())
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	82 17       	cp	r24, r18
 2ba:	93 07       	cpc	r25, r19
 2bc:	0c f4       	brge	.+2      	; 0x2c0 <_ZN6Buffer10circBufPopEPS_+0x80>
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	44 23       	and	r20, r20
 2c2:	11 f0       	breq	.+4      	; 0x2c8 <_ZN6Buffer10circBufPopEPS_+0x88>
 2c4:	1a 82       	std	Y+2, r1	; 0x02
 2c6:	19 82       	std	Y+1, r1	; 0x01
 2c8:	88 85       	ldd	r24, Y+8	; 0x08
 2ca:	99 85       	ldd	r25, Y+9	; 0x09
 2cc:	29 81       	ldd	r18, Y+1	; 0x01
 2ce:	3a 81       	ldd	r19, Y+2	; 0x02
		next = 0;
 2d0:	b9 01       	movw	r22, r18
 2d2:	4e df       	rcall	.-356    	; 0x170 <_ZN6Buffer7setTailEi>

	c->setTail(next);
 2d4:	8d 81       	ldd	r24, Y+5	; 0x05
 2d6:	29 96       	adiw	r28, 0x09	; 9
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	cd bf       	out	0x3d, r28	; 61

	return data;
 2e2:	cf 91       	pop	r28
}
 2e4:	df 91       	pop	r29
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <_ZN6Buffer11circBufPushEPS_h>:

int Buffer::circBufPush(Buffer *c, uint8_t data){
 2ec:	df 93       	push	r29
 2ee:	cf 93       	push	r28
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	29 97       	sbiw	r28, 0x09	; 9
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	9e 83       	std	Y+6, r25	; 0x06
 302:	8d 83       	std	Y+5, r24	; 0x05
 304:	78 87       	std	Y+8, r23	; 0x08
 306:	6f 83       	std	Y+7, r22	; 0x07
 308:	49 87       	std	Y+9, r20	; 0x09
	int next = c->getHead() + 1;
 30a:	8f 81       	ldd	r24, Y+7	; 0x07
 30c:	98 85       	ldd	r25, Y+8	; 0x08
 30e:	e6 de       	rcall	.-564    	; 0xdc <_ZNK6Buffer7getHeadEv>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	9a 83       	std	Y+2, r25	; 0x02
 314:	89 83       	std	Y+1, r24	; 0x01
 316:	8f 81       	ldd	r24, Y+7	; 0x07

	if (next >= c->getMaxLen()){
 318:	98 85       	ldd	r25, Y+8	; 0x08
 31a:	09 df       	rcall	.-494    	; 0x12e <_ZNK6Buffer9getMaxLenEv>
 31c:	9c 01       	movw	r18, r24
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	9a 81       	ldd	r25, Y+2	; 0x02
 324:	82 17       	cp	r24, r18
 326:	93 07       	cpc	r25, r19
 328:	0c f4       	brge	.+2      	; 0x32c <_ZN6Buffer11circBufPushEPS_h+0x40>
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	44 23       	and	r20, r20
 32e:	11 f0       	breq	.+4      	; 0x334 <_ZN6Buffer11circBufPushEPS_h+0x48>
 330:	1a 82       	std	Y+2, r1	; 0x02
 332:	19 82       	std	Y+1, r1	; 0x01
		next = 0;
 334:	8f 81       	ldd	r24, Y+7	; 0x07
 336:	98 85       	ldd	r25, Y+8	; 0x08
	}

	if (next == c->getTail())
 338:	0a df       	rcall	.-492    	; 0x14e <_ZNK6Buffer7getTailEv>
 33a:	9c 01       	movw	r18, r24
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	9a 81       	ldd	r25, Y+2	; 0x02
 342:	28 17       	cp	r18, r24
 344:	39 07       	cpc	r19, r25
 346:	09 f0       	breq	.+2      	; 0x34a <_ZN6Buffer11circBufPushEPS_h+0x5e>
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	44 23       	and	r20, r20
 34c:	19 f0       	breq	.+6      	; 0x354 <_ZN6Buffer11circBufPushEPS_h+0x68>
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	9f ef       	ldi	r25, 0xFF	; 255
 352:	17 c0       	rjmp	.+46     	; 0x382 <_ZN6Buffer11circBufPushEPS_h+0x96>
		return -1;
 354:	8f 81       	ldd	r24, Y+7	; 0x07
 356:	98 85       	ldd	r25, Y+8	; 0x08
 358:	b1 de       	rcall	.-670    	; 0xbc <_ZNK6Buffer9getBufferEv>
	uint8_t * aux = c->getBuffer();
 35a:	9c 83       	std	Y+4, r25	; 0x04
 35c:	8b 83       	std	Y+3, r24	; 0x03
 35e:	8f 81       	ldd	r24, Y+7	; 0x07
 360:	98 85       	ldd	r25, Y+8	; 0x08
 362:	bc de       	rcall	.-648    	; 0xdc <_ZNK6Buffer7getHeadEv>
 364:	2b 81       	ldd	r18, Y+3	; 0x03
	aux[c->getHead()] = data;
 366:	3c 81       	ldd	r19, Y+4	; 0x04
 368:	82 0f       	add	r24, r18
 36a:	93 1f       	adc	r25, r19
 36c:	29 85       	ldd	r18, Y+9	; 0x09
 36e:	fc 01       	movw	r30, r24
 370:	20 83       	st	Z, r18
 372:	8f 81       	ldd	r24, Y+7	; 0x07
 374:	98 85       	ldd	r25, Y+8	; 0x08
 376:	29 81       	ldd	r18, Y+1	; 0x01
 378:	3a 81       	ldd	r19, Y+2	; 0x02
 37a:	b9 01       	movw	r22, r18
	c->setHead(next);
 37c:	c0 de       	rcall	.-640    	; 0xfe <_ZN6Buffer7setHeadEi>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	29 96       	adiw	r28, 0x09	; 9
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
	return 0;
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
}
 38e:	cf 91       	pop	r28
 390:	df 91       	pop	r29
 392:	08 95       	ret

00000394 <_Z41__static_initialization_and_destruction_0ii>:
 394:	df 93       	push	r29
 396:	cf 93       	push	r28
 398:	00 d0       	rcall	.+0      	; 0x39a <_Z41__static_initialization_and_destruction_0ii+0x6>
 39a:	00 d0       	rcall	.+0      	; 0x39c <_Z41__static_initialization_and_destruction_0ii+0x8>
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	9a 83       	std	Y+2, r25	; 0x02
 3a2:	89 83       	std	Y+1, r24	; 0x01
 3a4:	7c 83       	std	Y+4, r23	; 0x04
 3a6:	6b 83       	std	Y+3, r22	; 0x03
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	9a 81       	ldd	r25, Y+2	; 0x02
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	91 05       	cpc	r25, r1
 3b0:	49 f4       	brne	.+18     	; 0x3c4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	9c 81       	ldd	r25, Y+4	; 0x04
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
 3b8:	8f 3f       	cpi	r24, 0xFF	; 255
 3ba:	92 07       	cpc	r25, r18
 3bc:	19 f4       	brne	.+6      	; 0x3c4 <_Z41__static_initialization_and_destruction_0ii+0x30>
#include "avr/io.h"
#include "stdlib.h"

//#define MAX_SIZE 256

Buffer Buffer::b;
 3be:	84 e2       	ldi	r24, 0x24	; 36
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	fd de       	rcall	.-518    	; 0x1be <_ZN6BufferC1Ev>
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	9a 81       	ldd	r25, Y+2	; 0x02
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	49 f4       	brne	.+18     	; 0x3de <_Z41__static_initialization_and_destruction_0ii+0x4a>
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	9c 81       	ldd	r25, Y+4	; 0x04
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	8f 3f       	cpi	r24, 0xFF	; 255
 3d4:	92 07       	cpc	r25, r18
 3d6:	19 f4       	brne	.+6      	; 0x3de <_Z41__static_initialization_and_destruction_0ii+0x4a>
 3d8:	84 e2       	ldi	r24, 0x24	; 36
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	03 df       	rcall	.-506    	; 0x1e4 <_ZN6BufferD1Ev>
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
		return -1;
	uint8_t * aux = c->getBuffer();
	aux[c->getHead()] = data;
	c->setHead(next);
	return 0;
}
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	cf 91       	pop	r28
 3e8:	df 91       	pop	r29
 3ea:	08 95       	ret

000003ec <_GLOBAL__I__ZN6Buffer1bE>:
 3ec:	df 93       	push	r29
 3ee:	cf 93       	push	r28
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	6f ef       	ldi	r22, 0xFF	; 255
 3fa:	7f ef       	ldi	r23, 0xFF	; 255
 3fc:	cb df       	rcall	.-106    	; 0x394 <_Z41__static_initialization_and_destruction_0ii>
 3fe:	cf 91       	pop	r28
 400:	df 91       	pop	r29
 402:	08 95       	ret

00000404 <_GLOBAL__D__ZN6Buffer1bE>:
 404:	df 93       	push	r29
 406:	cf 93       	push	r28
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	6f ef       	ldi	r22, 0xFF	; 255
 412:	7f ef       	ldi	r23, 0xFF	; 255
 414:	bf df       	rcall	.-130    	; 0x394 <_Z41__static_initialization_and_destruction_0ii>
 416:	cf 91       	pop	r28
 418:	df 91       	pop	r29
 41a:	08 95       	ret

0000041c <_ZN4UartC1Ev>:
Uart Uart::u;
Buffer Uart::rx;
Buffer Uart::tx;


Uart::Uart(){
 41c:	df 93       	push	r29
 41e:	cf 93       	push	r28
 420:	00 d0       	rcall	.+0      	; 0x422 <_ZN4UartC1Ev+0x6>
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
 426:	9a 83       	std	Y+2, r25	; 0x02
 428:	89 83       	std	Y+1, r24	; 0x01
	//SERIAL
	UBRR0H = 0;
 42a:	85 ec       	ldi	r24, 0xC5	; 197
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	fc 01       	movw	r30, r24
 430:	10 82       	st	Z, r1
	UBRR0L = 103;
 432:	84 ec       	ldi	r24, 0xC4	; 196
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	27 e6       	ldi	r18, 0x67	; 103
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
	UCSR0C = 0x06;
 43c:	82 ec       	ldi	r24, 0xC2	; 194
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	26 e0       	ldi	r18, 0x06	; 6
 442:	fc 01       	movw	r30, r24
 444:	20 83       	st	Z, r18
	UCSR0B = 0x98;
 446:	81 ec       	ldi	r24, 0xC1	; 193
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	28 e9       	ldi	r18, 0x98	; 152
 44c:	fc 01       	movw	r30, r24
 44e:	20 83       	st	Z, r18
	//LED
	PINB = 0x23;
 450:	83 e2       	ldi	r24, 0x23	; 35
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	23 e2       	ldi	r18, 0x23	; 35
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18
	DDRB = 0x24;
 45a:	84 e2       	ldi	r24, 0x24	; 36
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	24 e2       	ldi	r18, 0x24	; 36
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
	PORTB = 0x80;
 464:	85 e2       	ldi	r24, 0x25	; 37
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	20 e8       	ldi	r18, 0x80	; 128
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
}
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	cf 91       	pop	r28
 474:	df 91       	pop	r29
 476:	08 95       	ret

00000478 <_ZN4Uart20rx_interrupt_handlerEv>:

void Uart::rx_interrupt_handler() {
 478:	df 93       	push	r29
 47a:	cf 93       	push	r28
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
	if(u.rx.circBufPush(& u.rx,UDR0) == -1) PORTB |= _BV(PORTB5);
 480:	86 ec       	ldi	r24, 0xC6	; 198
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	fc 01       	movw	r30, r24
 486:	40 81       	ld	r20, Z
 488:	8b e2       	ldi	r24, 0x2B	; 43
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	2b e2       	ldi	r18, 0x2B	; 43
 48e:	31 e0       	ldi	r19, 0x01	; 1
 490:	b9 01       	movw	r22, r18
 492:	2c df       	rcall	.-424    	; 0x2ec <_ZN6Buffer11circBufPushEPS_h>
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	ff ef       	ldi	r31, 0xFF	; 255
 498:	8f 3f       	cpi	r24, 0xFF	; 255
 49a:	9f 07       	cpc	r25, r31
 49c:	09 f0       	breq	.+2      	; 0x4a0 <_ZN4Uart20rx_interrupt_handlerEv+0x28>
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	22 23       	and	r18, r18
 4a2:	49 f0       	breq	.+18     	; 0x4b6 <_ZN4Uart20rx_interrupt_handlerEv+0x3e>
 4a4:	85 e2       	ldi	r24, 0x25	; 37
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	25 e2       	ldi	r18, 0x25	; 37
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	f9 01       	movw	r30, r18
 4ae:	20 81       	ld	r18, Z
 4b0:	20 62       	ori	r18, 0x20	; 32
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
 4b6:	cf 91       	pop	r28
	//TEST
//	PORTB &= ~_BV(PORTB5);	//LIGA LED
//	PORTB |= _BV(PORTB5);	//DESLIGA LED
}
 4b8:	df 91       	pop	r29
 4ba:	08 95       	ret

000004bc <_ZN4Uart23empty_interrupt_handlerEv>:

void Uart::empty_interrupt_handler(){
 4bc:	df 93       	push	r29
 4be:	cf 93       	push	r28
 4c0:	0f 92       	push	r0
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
	//TEST
//	PORTB &= ~_BV(PORTB5);	//LIGA LED
//	PORTB |= _BV(PORTB5);	//DESLIGA LED
	uint8_t aux = u.tx.circBufPop(& u.tx);
 4c6:	81 e3       	ldi	r24, 0x31	; 49
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	21 e3       	ldi	r18, 0x31	; 49
 4cc:	31 e0       	ldi	r19, 0x01	; 1
 4ce:	b9 01       	movw	r22, r18
 4d0:	b7 de       	rcall	.-658    	; 0x240 <_ZN6Buffer10circBufPopEPS_>
 4d2:	89 83       	std	Y+1, r24	; 0x01
 4d4:	86 ec       	ldi	r24, 0xC6	; 198
	if(aux == -1) PORTB |= _BV(PORTB5);
	UDR0 = aux;
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	29 81       	ldd	r18, Y+1	; 0x01
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
 4de:	81 ec       	ldi	r24, 0xC1	; 193
	UCSR0B &= ~0x20;
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	21 ec       	ldi	r18, 0xC1	; 193
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	f9 01       	movw	r30, r18
 4e8:	20 81       	ld	r18, Z
 4ea:	2f 7d       	andi	r18, 0xDF	; 223
 4ec:	fc 01       	movw	r30, r24
 4ee:	20 83       	st	Z, r18
 4f0:	0f 90       	pop	r0
}
 4f2:	cf 91       	pop	r28
 4f4:	df 91       	pop	r29
 4f6:	08 95       	ret

000004f8 <__vector_18>:

ISR(USART_RX_vect ){
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
 51a:	df 93       	push	r29
 51c:	cf 93       	push	r28
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
	Uart::rx_interrupt_handler();
 522:	aa df       	rcall	.-172    	; 0x478 <_ZN4Uart20rx_interrupt_handlerEv>
 524:	cf 91       	pop	r28
}
 526:	df 91       	pop	r29
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_19>:

ISR(USART_UDRE_vect ){
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
 56c:	df 93       	push	r29
 56e:	cf 93       	push	r28
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
	Uart::empty_interrupt_handler();
 574:	a3 df       	rcall	.-186    	; 0x4bc <_ZN4Uart23empty_interrupt_handlerEv>
 576:	cf 91       	pop	r28
}
 578:	df 91       	pop	r29
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	7f 91       	pop	r23
 588:	6f 91       	pop	r22
 58a:	5f 91       	pop	r21
 58c:	4f 91       	pop	r20
 58e:	3f 91       	pop	r19
 590:	2f 91       	pop	r18
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <_ZN4Uart11interruptonEv>:

void Uart::interrupton(){
 59c:	df 93       	push	r29
 59e:	cf 93       	push	r28
 5a0:	cd b7       	in	r28, 0x3d	; 61
 5a2:	de b7       	in	r29, 0x3e	; 62
	sei();
 5a4:	78 94       	sei
}
 5a6:	cf 91       	pop	r28
 5a8:	df 91       	pop	r29
 5aa:	08 95       	ret

000005ac <_Z41__static_initialization_and_destruction_0ii>:

void Uart::interruptoff(){
	cli();
}
 5ac:	df 93       	push	r29
 5ae:	cf 93       	push	r28
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <_Z41__static_initialization_and_destruction_0ii+0x6>
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <_Z41__static_initialization_and_destruction_0ii+0x8>
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
 5b8:	9a 83       	std	Y+2, r25	; 0x02
 5ba:	89 83       	std	Y+1, r24	; 0x01
 5bc:	7c 83       	std	Y+4, r23	; 0x04
 5be:	6b 83       	std	Y+3, r22	; 0x03
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	9a 81       	ldd	r25, Y+2	; 0x02
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	91 05       	cpc	r25, r1
 5c8:	79 f4       	brne	.+30     	; 0x5e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 5ca:	8b 81       	ldd	r24, Y+3	; 0x03
 5cc:	9c 81       	ldd	r25, Y+4	; 0x04
 5ce:	2f ef       	ldi	r18, 0xFF	; 255
 5d0:	8f 3f       	cpi	r24, 0xFF	; 255
 5d2:	92 07       	cpc	r25, r18
 5d4:	49 f4       	brne	.+18     	; 0x5e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
#include "Uart.h"
#include "avr/io.h"
#include "avr/interrupt.h"
#include "Buffer.h"

Uart Uart::u;
 5d6:	8a e2       	ldi	r24, 0x2A	; 42
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	20 df       	rcall	.-448    	; 0x41c <_ZN4UartC1Ev>
 5dc:	8b e2       	ldi	r24, 0x2B	; 43
Buffer Uart::rx;
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	ee dd       	rcall	.-1060   	; 0x1be <_ZN6BufferC1Ev>
 5e2:	81 e3       	ldi	r24, 0x31	; 49
 5e4:	91 e0       	ldi	r25, 0x01	; 1
Buffer Uart::tx;
 5e6:	eb dd       	rcall	.-1066   	; 0x1be <_ZN6BufferC1Ev>
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
 5ea:	9a 81       	ldd	r25, Y+2	; 0x02
 5ec:	00 97       	sbiw	r24, 0x00	; 0
 5ee:	61 f4       	brne	.+24     	; 0x608 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 5f0:	8b 81       	ldd	r24, Y+3	; 0x03
 5f2:	9c 81       	ldd	r25, Y+4	; 0x04
 5f4:	2f ef       	ldi	r18, 0xFF	; 255
 5f6:	8f 3f       	cpi	r24, 0xFF	; 255
 5f8:	92 07       	cpc	r25, r18
 5fa:	31 f4       	brne	.+12     	; 0x608 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 5fc:	81 e3       	ldi	r24, 0x31	; 49
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	f1 dd       	rcall	.-1054   	; 0x1e4 <_ZN6BufferD1Ev>
 602:	8b e2       	ldi	r24, 0x2B	; 43
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	ee dd       	rcall	.-1060   	; 0x1e4 <_ZN6BufferD1Ev>
 608:	0f 90       	pop	r0
#include "avr/io.h"
#include "avr/interrupt.h"
#include "Buffer.h"

Uart Uart::u;
Buffer Uart::rx;
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	cf 91       	pop	r28
	sei();
}

void Uart::interruptoff(){
	cli();
}
 612:	df 91       	pop	r29
 614:	08 95       	ret

00000616 <_GLOBAL__I__ZN4Uart1uE>:
 616:	df 93       	push	r29
 618:	cf 93       	push	r28
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	6f ef       	ldi	r22, 0xFF	; 255
 624:	7f ef       	ldi	r23, 0xFF	; 255
 626:	c2 df       	rcall	.-124    	; 0x5ac <_Z41__static_initialization_and_destruction_0ii>
 628:	cf 91       	pop	r28
 62a:	df 91       	pop	r29
 62c:	08 95       	ret

0000062e <_GLOBAL__D__ZN4Uart1uE>:
 62e:	df 93       	push	r29
 630:	cf 93       	push	r28
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	6f ef       	ldi	r22, 0xFF	; 255
 63c:	7f ef       	ldi	r23, 0xFF	; 255
 63e:	b6 df       	rcall	.-148    	; 0x5ac <_Z41__static_initialization_and_destruction_0ii>
 640:	cf 91       	pop	r28
 642:	df 91       	pop	r29
 644:	08 95       	ret

00000646 <_Z7appSend4Uarth>:
public:
	Buffer();
	virtual ~Buffer();
	int circBufPush(Buffer * c, uint8_t data);
	uint8_t circBufPop(Buffer * c);

 646:	df 93       	push	r29
 648:	cf 93       	push	r28
 64a:	00 d0       	rcall	.+0      	; 0x64c <_Z7appSend4Uarth+0x6>
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	89 83       	std	Y+1, r24	; 0x01
 652:	6a 83       	std	Y+2, r22	; 0x02
	uint8_t * const getBuffer() const {
 654:	86 ec       	ldi	r24, 0xC6	; 198
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	2a 81       	ldd	r18, Y+2	; 0x02
 65a:	fc 01       	movw	r30, r24
 65c:	20 83       	st	Z, r18
		return * buffer;
 65e:	86 ec       	ldi	r24, 0xC6	; 198
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	fc 01       	movw	r30, r24
 664:	40 81       	ld	r20, Z
 666:	81 e3       	ldi	r24, 0x31	; 49
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	21 e3       	ldi	r18, 0x31	; 49
 66c:	31 e0       	ldi	r19, 0x01	; 1
 66e:	b9 01       	movw	r22, r18
 670:	3d de       	rcall	.-902    	; 0x2ec <_ZN6Buffer11circBufPushEPS_h>
 672:	0f 90       	pop	r0
	}
 674:	0f 90       	pop	r0
 676:	cf 91       	pop	r28
 678:	df 91       	pop	r29
 67a:	08 95       	ret

0000067c <_Z10appReceive4Uart>:

	int getHead() const {
 67c:	df 93       	push	r29
 67e:	cf 93       	push	r28
 680:	00 d0       	rcall	.+0      	; 0x682 <_Z10appReceive4Uart+0x6>
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
 686:	8a 83       	std	Y+2, r24	; 0x02
		return head;
 688:	8b e2       	ldi	r24, 0x2B	; 43
 68a:	91 e0       	ldi	r25, 0x01	; 1
 68c:	21 e3       	ldi	r18, 0x31	; 49
 68e:	31 e0       	ldi	r19, 0x01	; 1
 690:	b9 01       	movw	r22, r18
 692:	d6 dd       	rcall	.-1108   	; 0x240 <_ZN6Buffer10circBufPopEPS_>
 694:	89 83       	std	Y+1, r24	; 0x01
 696:	0f 90       	pop	r0
	}
 698:	0f 90       	pop	r0
 69a:	cf 91       	pop	r28
 69c:	df 91       	pop	r29
 69e:	08 95       	ret

000006a0 <main>:

	void setHead(int head) {
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	df 93       	push	r29
 6a6:	cf 93       	push	r28
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <main+0xa>
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
		this->head = head;
 6ae:	ce 01       	movw	r24, r28
 6b0:	02 96       	adiw	r24, 0x02	; 2
 6b2:	b4 de       	rcall	.-664    	; 0x41c <_ZN4UartC1Ev>
 6b4:	73 df       	rcall	.-282    	; 0x59c <_ZN4Uart11interruptonEv>
	}
 6b6:	19 82       	std	Y+1, r1	; 0x01
 6b8:	68 e7       	ldi	r22, 0x78	; 120

 6ba:	c5 df       	rcall	.-118    	; 0x646 <_Z7appSend4Uarth>
	const int getMaxLen() const {
		return maxLen;
 6bc:	06 ec       	ldi	r16, 0xC6	; 198
 6be:	10 e0       	ldi	r17, 0x00	; 0
 6c0:	dd df       	rcall	.-70     	; 0x67c <_Z10appReceive4Uart>
	}
 6c2:	f8 01       	movw	r30, r16
 6c4:	80 83       	st	Z, r24
 6c6:	6a e7       	ldi	r22, 0x7A	; 122
 6c8:	be df       	rcall	.-132    	; 0x646 <_Z7appSend4Uarth>
 6ca:	06 ec       	ldi	r16, 0xC6	; 198
 6cc:	10 e0       	ldi	r17, 0x00	; 0

 6ce:	d6 df       	rcall	.-84     	; 0x67c <_Z10appReceive4Uart>
 6d0:	f8 01       	movw	r30, r16
 6d2:	80 83       	st	Z, r24
	int getTail() const {
 6d4:	67 e7       	ldi	r22, 0x77	; 119
 6d6:	b7 df       	rcall	.-146    	; 0x646 <_Z7appSend4Uarth>
 6d8:	06 ec       	ldi	r16, 0xC6	; 198
 6da:	10 e0       	ldi	r17, 0x00	; 0
 6dc:	cf df       	rcall	.-98     	; 0x67c <_Z10appReceive4Uart>
 6de:	f8 01       	movw	r30, r16
		return tail;
 6e0:	80 83       	st	Z, r24
 6e2:	64 e7       	ldi	r22, 0x74	; 116
 6e4:	b0 df       	rcall	.-160    	; 0x646 <_Z7appSend4Uarth>
	}
 6e6:	06 ec       	ldi	r16, 0xC6	; 198
 6e8:	10 e0       	ldi	r17, 0x00	; 0
 6ea:	c8 df       	rcall	.-112    	; 0x67c <_Z10appReceive4Uart>
 6ec:	f8 01       	movw	r30, r16
 6ee:	80 83       	st	Z, r24
 6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <main+0x54>

 6f2:	00 00       	nop
 6f4:	8b e2       	ldi	r24, 0x2B	; 43
 6f6:	91 e0       	ldi	r25, 0x01	; 1
	void setTail(int tail) {
 6f8:	2a dd       	rcall	.-1452   	; 0x14e <_ZNK6Buffer7getTailEv>
 6fa:	8c 01       	movw	r16, r24
 6fc:	8b e2       	ldi	r24, 0x2B	; 43
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	ed dc       	rcall	.-1574   	; 0xdc <_ZNK6Buffer7getHeadEv>
 702:	21 e0       	ldi	r18, 0x01	; 1
 704:	08 17       	cp	r16, r24
		this->tail = tail;
	}
 706:	19 07       	cpc	r17, r25

 708:	09 f4       	brne	.+2      	; 0x70c <main+0x6c>
 70a:	20 e0       	ldi	r18, 0x00	; 0
 70c:	22 23       	and	r18, r18
 70e:	89 f3       	breq	.-30     	; 0x6f2 <main+0x52>
 710:	81 ec       	ldi	r24, 0xC1	; 193
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	21 ec       	ldi	r18, 0xC1	; 193
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	f9 01       	movw	r30, r18
 71a:	20 81       	ld	r18, Z
 71c:	20 62       	ori	r18, 0x20	; 32
 71e:	fc 01       	movw	r30, r24
 720:	20 83       	st	Z, r18
 722:	8b e2       	ldi	r24, 0x2B	; 43
 724:	91 e0       	ldi	r25, 0x01	; 1
 726:	2b e2       	ldi	r18, 0x2B	; 43
private:
 728:	31 e0       	ldi	r19, 0x01	; 1
 72a:	b9 01       	movw	r22, r18
 72c:	89 dd       	rcall	.-1262   	; 0x240 <_ZN6Buffer10circBufPopEPS_>
 72e:	48 2f       	mov	r20, r24
 730:	81 e3       	ldi	r24, 0x31	; 49
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	21 e3       	ldi	r18, 0x31	; 49
 736:	31 e0       	ldi	r19, 0x01	; 1
 738:	b9 01       	movw	r22, r18
	static Buffer b;
 73a:	d8 dd       	rcall	.-1104   	; 0x2ec <_ZN6Buffer11circBufPushEPS_h>
 73c:	db cf       	rjmp	.-74     	; 0x6f4 <main+0x54>

0000073e <__tablejump2__>:
 73e:	ee 0f       	add	r30, r30
 740:	ff 1f       	adc	r31, r31

00000742 <__tablejump__>:
 742:	05 90       	lpm	r0, Z+
 744:	f4 91       	lpm	r31, Z+
 746:	e0 2d       	mov	r30, r0
 748:	09 94       	ijmp

0000074a <malloc>:
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	82 30       	cpi	r24, 0x02	; 2
 750:	91 05       	cpc	r25, r1
 752:	10 f4       	brcc	.+4      	; 0x758 <malloc+0xe>
 754:	82 e0       	ldi	r24, 0x02	; 2
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	e0 91 39 01 	lds	r30, 0x0139
 75c:	f0 91 3a 01 	lds	r31, 0x013A
 760:	40 e0       	ldi	r20, 0x00	; 0
 762:	50 e0       	ldi	r21, 0x00	; 0
 764:	20 e0       	ldi	r18, 0x00	; 0
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	26 c0       	rjmp	.+76     	; 0x7b6 <malloc+0x6c>
 76a:	60 81       	ld	r22, Z
 76c:	71 81       	ldd	r23, Z+1	; 0x01
 76e:	68 17       	cp	r22, r24
 770:	79 07       	cpc	r23, r25
 772:	e0 f0       	brcs	.+56     	; 0x7ac <malloc+0x62>
 774:	68 17       	cp	r22, r24
 776:	79 07       	cpc	r23, r25
 778:	81 f4       	brne	.+32     	; 0x79a <malloc+0x50>
 77a:	82 81       	ldd	r24, Z+2	; 0x02
 77c:	93 81       	ldd	r25, Z+3	; 0x03
 77e:	21 15       	cp	r18, r1
 780:	31 05       	cpc	r19, r1
 782:	31 f0       	breq	.+12     	; 0x790 <malloc+0x46>
 784:	d9 01       	movw	r26, r18
 786:	13 96       	adiw	r26, 0x03	; 3
 788:	9c 93       	st	X, r25
 78a:	8e 93       	st	-X, r24
 78c:	12 97       	sbiw	r26, 0x02	; 2
 78e:	2b c0       	rjmp	.+86     	; 0x7e6 <malloc+0x9c>
 790:	90 93 3a 01 	sts	0x013A, r25
 794:	80 93 39 01 	sts	0x0139, r24
 798:	26 c0       	rjmp	.+76     	; 0x7e6 <malloc+0x9c>
 79a:	41 15       	cp	r20, r1
 79c:	51 05       	cpc	r21, r1
 79e:	19 f0       	breq	.+6      	; 0x7a6 <malloc+0x5c>
 7a0:	64 17       	cp	r22, r20
 7a2:	75 07       	cpc	r23, r21
 7a4:	18 f4       	brcc	.+6      	; 0x7ac <malloc+0x62>
 7a6:	ab 01       	movw	r20, r22
 7a8:	e9 01       	movw	r28, r18
 7aa:	df 01       	movw	r26, r30
 7ac:	9f 01       	movw	r18, r30
 7ae:	72 81       	ldd	r23, Z+2	; 0x02
 7b0:	63 81       	ldd	r22, Z+3	; 0x03
 7b2:	e7 2f       	mov	r30, r23
 7b4:	f6 2f       	mov	r31, r22
 7b6:	30 97       	sbiw	r30, 0x00	; 0
 7b8:	c1 f6       	brne	.-80     	; 0x76a <malloc+0x20>
 7ba:	41 15       	cp	r20, r1
 7bc:	51 05       	cpc	r21, r1
 7be:	01 f1       	breq	.+64     	; 0x800 <malloc+0xb6>
 7c0:	48 1b       	sub	r20, r24
 7c2:	59 0b       	sbc	r21, r25
 7c4:	44 30       	cpi	r20, 0x04	; 4
 7c6:	51 05       	cpc	r21, r1
 7c8:	80 f4       	brcc	.+32     	; 0x7ea <malloc+0xa0>
 7ca:	12 96       	adiw	r26, 0x02	; 2
 7cc:	8d 91       	ld	r24, X+
 7ce:	9c 91       	ld	r25, X
 7d0:	13 97       	sbiw	r26, 0x03	; 3
 7d2:	20 97       	sbiw	r28, 0x00	; 0
 7d4:	19 f0       	breq	.+6      	; 0x7dc <malloc+0x92>
 7d6:	9b 83       	std	Y+3, r25	; 0x03
 7d8:	8a 83       	std	Y+2, r24	; 0x02
 7da:	04 c0       	rjmp	.+8      	; 0x7e4 <malloc+0x9a>
 7dc:	90 93 3a 01 	sts	0x013A, r25
 7e0:	80 93 39 01 	sts	0x0139, r24
 7e4:	fd 01       	movw	r30, r26
 7e6:	32 96       	adiw	r30, 0x02	; 2
 7e8:	46 c0       	rjmp	.+140    	; 0x876 <malloc+0x12c>
 7ea:	fd 01       	movw	r30, r26
 7ec:	e4 0f       	add	r30, r20
 7ee:	f5 1f       	adc	r31, r21
 7f0:	81 93       	st	Z+, r24
 7f2:	91 93       	st	Z+, r25
 7f4:	42 50       	subi	r20, 0x02	; 2
 7f6:	50 40       	sbci	r21, 0x00	; 0
 7f8:	11 96       	adiw	r26, 0x01	; 1
 7fa:	5c 93       	st	X, r21
 7fc:	4e 93       	st	-X, r20
 7fe:	3b c0       	rjmp	.+118    	; 0x876 <malloc+0x12c>
 800:	20 91 37 01 	lds	r18, 0x0137
 804:	30 91 38 01 	lds	r19, 0x0138
 808:	21 15       	cp	r18, r1
 80a:	31 05       	cpc	r19, r1
 80c:	41 f4       	brne	.+16     	; 0x81e <malloc+0xd4>
 80e:	20 91 02 01 	lds	r18, 0x0102
 812:	30 91 03 01 	lds	r19, 0x0103
 816:	30 93 38 01 	sts	0x0138, r19
 81a:	20 93 37 01 	sts	0x0137, r18
 81e:	20 91 04 01 	lds	r18, 0x0104
 822:	30 91 05 01 	lds	r19, 0x0105
 826:	21 15       	cp	r18, r1
 828:	31 05       	cpc	r19, r1
 82a:	41 f4       	brne	.+16     	; 0x83c <malloc+0xf2>
 82c:	2d b7       	in	r18, 0x3d	; 61
 82e:	3e b7       	in	r19, 0x3e	; 62
 830:	40 91 00 01 	lds	r20, 0x0100
 834:	50 91 01 01 	lds	r21, 0x0101
 838:	24 1b       	sub	r18, r20
 83a:	35 0b       	sbc	r19, r21
 83c:	e0 91 37 01 	lds	r30, 0x0137
 840:	f0 91 38 01 	lds	r31, 0x0138
 844:	e2 17       	cp	r30, r18
 846:	f3 07       	cpc	r31, r19
 848:	a0 f4       	brcc	.+40     	; 0x872 <malloc+0x128>
 84a:	2e 1b       	sub	r18, r30
 84c:	3f 0b       	sbc	r19, r31
 84e:	28 17       	cp	r18, r24
 850:	39 07       	cpc	r19, r25
 852:	78 f0       	brcs	.+30     	; 0x872 <malloc+0x128>
 854:	ac 01       	movw	r20, r24
 856:	4e 5f       	subi	r20, 0xFE	; 254
 858:	5f 4f       	sbci	r21, 0xFF	; 255
 85a:	24 17       	cp	r18, r20
 85c:	35 07       	cpc	r19, r21
 85e:	48 f0       	brcs	.+18     	; 0x872 <malloc+0x128>
 860:	4e 0f       	add	r20, r30
 862:	5f 1f       	adc	r21, r31
 864:	50 93 38 01 	sts	0x0138, r21
 868:	40 93 37 01 	sts	0x0137, r20
 86c:	81 93       	st	Z+, r24
 86e:	91 93       	st	Z+, r25
 870:	02 c0       	rjmp	.+4      	; 0x876 <malloc+0x12c>
 872:	e0 e0       	ldi	r30, 0x00	; 0
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	cf 01       	movw	r24, r30
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	08 95       	ret

0000087e <free>:
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	00 97       	sbiw	r24, 0x00	; 0
 884:	09 f4       	brne	.+2      	; 0x888 <free+0xa>
 886:	91 c0       	rjmp	.+290    	; 0x9aa <__stack+0xab>
 888:	fc 01       	movw	r30, r24
 88a:	32 97       	sbiw	r30, 0x02	; 2
 88c:	13 82       	std	Z+3, r1	; 0x03
 88e:	12 82       	std	Z+2, r1	; 0x02
 890:	60 91 39 01 	lds	r22, 0x0139
 894:	70 91 3a 01 	lds	r23, 0x013A
 898:	61 15       	cp	r22, r1
 89a:	71 05       	cpc	r23, r1
 89c:	81 f4       	brne	.+32     	; 0x8be <free+0x40>
 89e:	20 81       	ld	r18, Z
 8a0:	31 81       	ldd	r19, Z+1	; 0x01
 8a2:	28 0f       	add	r18, r24
 8a4:	39 1f       	adc	r19, r25
 8a6:	80 91 37 01 	lds	r24, 0x0137
 8aa:	90 91 38 01 	lds	r25, 0x0138
 8ae:	82 17       	cp	r24, r18
 8b0:	93 07       	cpc	r25, r19
 8b2:	99 f5       	brne	.+102    	; 0x91a <__stack+0x1b>
 8b4:	f0 93 38 01 	sts	0x0138, r31
 8b8:	e0 93 37 01 	sts	0x0137, r30
 8bc:	76 c0       	rjmp	.+236    	; 0x9aa <__stack+0xab>
 8be:	db 01       	movw	r26, r22
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <free+0x4c>
 8c6:	cd 01       	movw	r24, r26
 8c8:	d9 01       	movw	r26, r18
 8ca:	ae 17       	cp	r26, r30
 8cc:	bf 07       	cpc	r27, r31
 8ce:	48 f4       	brcc	.+18     	; 0x8e2 <free+0x64>
 8d0:	12 96       	adiw	r26, 0x02	; 2
 8d2:	2d 91       	ld	r18, X+
 8d4:	3c 91       	ld	r19, X
 8d6:	13 97       	sbiw	r26, 0x03	; 3
 8d8:	21 15       	cp	r18, r1
 8da:	31 05       	cpc	r19, r1
 8dc:	a1 f7       	brne	.-24     	; 0x8c6 <free+0x48>
 8de:	cd 01       	movw	r24, r26
 8e0:	21 c0       	rjmp	.+66     	; 0x924 <__stack+0x25>
 8e2:	b3 83       	std	Z+3, r27	; 0x03
 8e4:	a2 83       	std	Z+2, r26	; 0x02
 8e6:	ef 01       	movw	r28, r30
 8e8:	49 91       	ld	r20, Y+
 8ea:	59 91       	ld	r21, Y+
 8ec:	9e 01       	movw	r18, r28
 8ee:	24 0f       	add	r18, r20
 8f0:	35 1f       	adc	r19, r21
 8f2:	a2 17       	cp	r26, r18
 8f4:	b3 07       	cpc	r27, r19
 8f6:	79 f4       	brne	.+30     	; 0x916 <__stack+0x17>
 8f8:	2d 91       	ld	r18, X+
 8fa:	3c 91       	ld	r19, X
 8fc:	11 97       	sbiw	r26, 0x01	; 1
 8fe:	24 0f       	add	r18, r20
 900:	35 1f       	adc	r19, r21
 902:	2e 5f       	subi	r18, 0xFE	; 254
 904:	3f 4f       	sbci	r19, 0xFF	; 255
 906:	31 83       	std	Z+1, r19	; 0x01
 908:	20 83       	st	Z, r18
 90a:	12 96       	adiw	r26, 0x02	; 2
 90c:	2d 91       	ld	r18, X+
 90e:	3c 91       	ld	r19, X
 910:	13 97       	sbiw	r26, 0x03	; 3
 912:	33 83       	std	Z+3, r19	; 0x03
 914:	22 83       	std	Z+2, r18	; 0x02
 916:	00 97       	sbiw	r24, 0x00	; 0
 918:	29 f4       	brne	.+10     	; 0x924 <__stack+0x25>
 91a:	f0 93 3a 01 	sts	0x013A, r31
 91e:	e0 93 39 01 	sts	0x0139, r30
 922:	43 c0       	rjmp	.+134    	; 0x9aa <__stack+0xab>
 924:	dc 01       	movw	r26, r24
 926:	13 96       	adiw	r26, 0x03	; 3
 928:	fc 93       	st	X, r31
 92a:	ee 93       	st	-X, r30
 92c:	12 97       	sbiw	r26, 0x02	; 2
 92e:	4d 91       	ld	r20, X+
 930:	5d 91       	ld	r21, X+
 932:	a4 0f       	add	r26, r20
 934:	b5 1f       	adc	r27, r21
 936:	ea 17       	cp	r30, r26
 938:	fb 07       	cpc	r31, r27
 93a:	69 f4       	brne	.+26     	; 0x956 <__stack+0x57>
 93c:	20 81       	ld	r18, Z
 93e:	31 81       	ldd	r19, Z+1	; 0x01
 940:	24 0f       	add	r18, r20
 942:	35 1f       	adc	r19, r21
 944:	2e 5f       	subi	r18, 0xFE	; 254
 946:	3f 4f       	sbci	r19, 0xFF	; 255
 948:	ec 01       	movw	r28, r24
 94a:	39 83       	std	Y+1, r19	; 0x01
 94c:	28 83       	st	Y, r18
 94e:	22 81       	ldd	r18, Z+2	; 0x02
 950:	33 81       	ldd	r19, Z+3	; 0x03
 952:	3b 83       	std	Y+3, r19	; 0x03
 954:	2a 83       	std	Y+2, r18	; 0x02
 956:	e0 e0       	ldi	r30, 0x00	; 0
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
 95c:	fb 01       	movw	r30, r22
 95e:	bc 01       	movw	r22, r24
 960:	db 01       	movw	r26, r22
 962:	12 96       	adiw	r26, 0x02	; 2
 964:	8d 91       	ld	r24, X+
 966:	9c 91       	ld	r25, X
 968:	13 97       	sbiw	r26, 0x03	; 3
 96a:	00 97       	sbiw	r24, 0x00	; 0
 96c:	b9 f7       	brne	.-18     	; 0x95c <__stack+0x5d>
 96e:	9b 01       	movw	r18, r22
 970:	2e 5f       	subi	r18, 0xFE	; 254
 972:	3f 4f       	sbci	r19, 0xFF	; 255
 974:	8d 91       	ld	r24, X+
 976:	9c 91       	ld	r25, X
 978:	11 97       	sbiw	r26, 0x01	; 1
 97a:	82 0f       	add	r24, r18
 97c:	93 1f       	adc	r25, r19
 97e:	40 91 37 01 	lds	r20, 0x0137
 982:	50 91 38 01 	lds	r21, 0x0138
 986:	48 17       	cp	r20, r24
 988:	59 07       	cpc	r21, r25
 98a:	79 f4       	brne	.+30     	; 0x9aa <__stack+0xab>
 98c:	30 97       	sbiw	r30, 0x00	; 0
 98e:	29 f4       	brne	.+10     	; 0x99a <__stack+0x9b>
 990:	10 92 3a 01 	sts	0x013A, r1
 994:	10 92 39 01 	sts	0x0139, r1
 998:	02 c0       	rjmp	.+4      	; 0x99e <__stack+0x9f>
 99a:	13 82       	std	Z+3, r1	; 0x03
 99c:	12 82       	std	Z+2, r1	; 0x02
 99e:	22 50       	subi	r18, 0x02	; 2
 9a0:	30 40       	sbci	r19, 0x00	; 0
 9a2:	30 93 38 01 	sts	0x0138, r19
 9a6:	20 93 37 01 	sts	0x0137, r18
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	08 95       	ret

000009b0 <__do_global_dtors>:
 9b0:	10 e0       	ldi	r17, 0x00	; 0
 9b2:	cc e6       	ldi	r28, 0x6C	; 108
 9b4:	d0 e0       	ldi	r29, 0x00	; 0
 9b6:	03 c0       	rjmp	.+6      	; 0x9be <__do_global_dtors+0xe>
 9b8:	fe 01       	movw	r30, r28
 9ba:	c3 de       	rcall	.-634    	; 0x742 <__tablejump__>
 9bc:	22 96       	adiw	r28, 0x02	; 2
 9be:	c0 37       	cpi	r28, 0x70	; 112
 9c0:	d1 07       	cpc	r29, r17
 9c2:	d1 f7       	brne	.-12     	; 0x9b8 <__do_global_dtors+0x8>
 9c4:	f8 94       	cli

000009c6 <__stop_program>:
 9c6:	ff cf       	rjmp	.-2      	; 0x9c6 <__stop_program>
